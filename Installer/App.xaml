<Application x:Class="Installer.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             StartupUri="MainWindow.xaml">
    <Application.Resources>
        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Light.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Defaults.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.Button.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.CheckBox.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.ListBox.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.ListView.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.PopupBox.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.RadioButton.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.TextBlock.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignThemes.Wpf;component/Themes/MaterialDesignTheme.ToggleButton.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignColors;component/Themes/Recommended/Primary/MaterialDesignColor.DeepPurple.xaml" />
                <ResourceDictionary Source="pack://application:,,,/MaterialDesignColors;component/Themes/Recommended/Accent/MaterialDesignColor.Lime.xaml" />
            </ResourceDictionary.MergedDictionaries>

            <Style x:Key="AppBarButton" TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
                <Setter Property="Padding" Value="0"/>
                <Setter Property="Margin" Value="8,0"/>
                <Setter Property="Height" Value="37"/>
                <Setter Property="Width" Value="37"/>
                <Setter Property="Background" Value="{x:Null}"/>
                <Setter Property="BorderBrush" Value="{x:Null}"/>
            </Style>

            <Style x:Key="WindowStyle" TargetType="Window" BasedOn="{StaticResource {x:Type Window}}">
                <Setter Property="BorderBrush" Value="#673AB7"/>
                <Setter Property="WindowStyle" Value="None"/>
                <Setter Property="ResizeMode" Value="NoResize"/>
                <Setter Property="BorderThickness" Value="1"/>
            </Style>
            
            <SolidColorBrush x:Key="ErrorBrushLight" Color="#d50000"/>
            <SolidColorBrush x:Key="ErrorBrushDark" Color="#ff6e6e"/>

            <!--<Style x:Key="WindowStyle" BasedOn="{StaticResource {x:Type Window}}" TargetType="{x:Type Window}">
                <Setter Property="Background" Value="White"/>
                <Setter Property="BorderBrush" Value="{DynamicResource Primary}"/>
                <Setter Property="Foreground" Value="{DynamicResource TextPrimary}"/>
                <Setter Property="WindowStyle" Value="None"/>
                <Setter Property="ResizeMode" Value="NoResize"/>
                <Setter Property="BorderThickness" Value="1"/>
            </Style>

             <Style TargetType="{x:Type Button}" 
                   x:Key="PathButton">
                <Setter Property="Foreground" Value="{DynamicResource TextPrimary}"/>
                <Setter Property="Background" Value="Transparent"/>
                <Setter Property="BorderBrush" Value="Transparent"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Border Name="Border" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding Background}" BorderThickness="1">
                                <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="Background" Value="{DynamicResource TextPrimary}"/>
                        <Setter Property="Foreground" Value="{DynamicResource Border}"/>
                    </Trigger>
                </Style.Triggers>
            </Style>

            <Style TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
                <Setter Property="Background" Value="{DynamicResource Primary}"/>
                <Setter Property="Foreground" Value="{DynamicResource Accent}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource Primary}"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Border Background="{TemplateBinding Background}" BorderBrush="{DynamicResource PrimaryLight}" BorderThickness="1">
                                <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="Background" Value="{DynamicResource PrimaryLight}"/>
                        <Setter Property="BorderBrush" Value="{DynamicResource PrimaryLight}"/>
                    </Trigger>
                </Style.Triggers>
            </Style>

            <Style x:Key="CancelButton" TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
                <Setter Property="Background" Value="{DynamicResource Primary}"/>
                <Setter Property="Foreground" Value="{DynamicResource Warn}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource Primary}"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Border Background="{TemplateBinding Background}" BorderBrush="{DynamicResource PrimaryLight}" BorderThickness="1">
                                <ContentPresenter HorizontalAlignment="Center" VerticalAlignment="Center"/>
                            </Border>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Style.Triggers>
                    <Trigger Property="IsMouseOver" Value="True">
                        <Setter Property="Background" Value="{DynamicResource PrimaryLight}"/>
                        <Setter Property="BorderBrush" Value="{DynamicResource PrimaryLight}"/>
                    </Trigger>
                </Style.Triggers>
            </Style>

            <Style TargetType="{x:Type RadioButton}" BasedOn="{StaticResource {x:Type RadioButton}}">
                <Setter Property="Background" Value="{DynamicResource TextSecondary}"/>
                <Setter Property="Foreground" Value="{DynamicResource Border}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource Border}"/>
            </Style>

            <Style TargetType="{x:Type Path}">
                <Setter Property="Fill" Value="{Binding Path=Foreground, RelativeSource={RelativeSource AncestorType={x:Type Button}}}"/>
            </Style>

            <Style TargetType="{x:Type ListBox}" BasedOn="{StaticResource {x:Type ListBox}}">
                <Setter Property="Foreground" Value="{DynamicResource Border}"/>
                <Setter Property="Background" Value="{DynamicResource PrimaryDark}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource Border}"/>
            </Style>

            <Style x:Key="ComboBox" TargetType="{x:Type CheckBox}" BasedOn="{StaticResource {x:Type CheckBox}}">
                <Setter Property="Background" Value="{DynamicResource TextSecondary}"/>
                <Setter Property="Foreground" Value="{DynamicResource Border}"/>
                <Setter Property="BorderBrush" Value="{DynamicResource Border}"/>
            </Style> -->
        </ResourceDictionary>
    </Application.Resources>
</Application>
