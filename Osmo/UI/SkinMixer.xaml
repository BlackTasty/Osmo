<Grid x:Class="Osmo.UI.SkinMixer"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
             xmlns:local="clr-namespace:Osmo.UI"
             xmlns:material="http://materialdesigninxaml.net/winfx/xaml/themes"
             xmlns:converter="clr-namespace:Osmo.Converters"
             xmlns:vm="clr-namespace:Osmo.ViewModel"
             mc:Ignorable="d" PreviewKeyUp="Grid_PreviewKeyUp"
             d:DesignHeight="450" d:DesignWidth="800" Tag="{DynamicResource sidebar_mixer}">
    <Grid.DataContext>
        <vm:SkinMixerViewModel/>
    </Grid.DataContext>
    <Grid.Resources>
        <converter:FileTypeIconConverter x:Key="FileTypeToIcon"/>
        <BooleanToVisibilityConverter x:Key="BooleanToVisibility"/>
        <converter:VolumeToIconConverter x:Key="VolumeToIcon"/>
        <converter:IntToBooleanConverter x:Key="IntToBoolean"/>
        <converter:IntToVisibilityConverter x:Key="IntToVisibility"/>

        <local:FilePicker x:Key="folderPicker" DialogClosed="FolderPicker_DialogClosed" Title="{Binding export_selectDirectory}"/>
    </Grid.Resources>
    <Grid.ColumnDefinitions>
        <ColumnDefinition Width="350*"/>
        <ColumnDefinition Width="70"/>
        <ColumnDefinition Width="350*"/>
    </Grid.ColumnDefinitions>
    <Grid.RowDefinitions>
        <RowDefinition Height="24"/>
        <RowDefinition Height="300*"/>
        <RowDefinition Height="200*"/>
        <RowDefinition Height="44"/>
    </Grid.RowDefinitions>
    <ListView x:Name="lv_elementsLeft" SelectionMode="Single" Grid.Row="1" ItemsSource="{Binding SkinLeft.Elements}" SelectionChanged="LeftSkin_SelectionChanged">
        <ListView.ContextMenu>
            <ContextMenu>
                <MenuItem Click="MenuItem_PlaybackToggleLeft_Click" Header="{DynamicResource tip_play}" IsEnabled="{Binding PlayEnabledLeft}" Visibility="{Binding PlayStatusLeft, Converter={StaticResource IntToVisibility}, ConverterParameter=0}"/>
                <MenuItem Click="MenuItem_PlaybackToggleLeft_Click" Header="{DynamicResource tip_pause}" Visibility="{Binding PlayStatusLeft, Converter={StaticResource IntToVisibility}, ConverterParameter=1}"/>
                <MenuItem Click="MenuItem_PlaybackStopLeft_Click" Header="{DynamicResource tip_stop}" Visibility="{Binding PlayStatusLeft, Converter={StaticResource IntToVisibility}, ConverterParameter=1}"/>
                <Separator/>
                <MenuItem Click="RevertSelected_Click" Header="{DynamicResource tip_revert}" IsEnabled="{Binding SelectedElementLeft.HasChanges}"/>
            </ContextMenu>
        </ListView.ContextMenu>
        <ListView.View>
            <GridView>
                <GridViewColumn Width="200" Header="{DynamicResource name}">
                    <GridViewColumn.CellTemplate>
                        <DataTemplate>
                            <TextBlock Text="{Binding Name, UpdateSourceTrigger=PropertyChanged}" FontStyle="{Binding FontStyle, UpdateSourceTrigger=PropertyChanged}" FontWeight="{Binding FontWeight, UpdateSourceTrigger=PropertyChanged}"/>
                        </DataTemplate>
                    </GridViewColumn.CellTemplate>
                </GridViewColumn>
                <GridViewColumn Header="" Width="32">
                    <GridViewColumn.CellTemplate>
                        <DataTemplate>
                            <material:PackIcon
                                Kind="{Binding FileType, Converter={StaticResource FileTypeToIcon}, Mode=OneWay, FallbackValue=File}"
                                Height="24"
                                Width="24" />
                        </DataTemplate>
                    </GridViewColumn.CellTemplate>
                </GridViewColumn>
                <GridViewColumn Header="HD" Width="32">
                    <GridViewColumn.CellTemplate>
                        <DataTemplate>
                            <material:PackIcon Visibility="{Binding IsHighDefinition, Converter={StaticResource BooleanToVisibility}, UpdateSourceTrigger=PropertyChanged}"
                                Kind="HighDefinition"
                                Height="24"
                                Width="24" />
                        </DataTemplate>
                    </GridViewColumn.CellTemplate>
                </GridViewColumn>
                <GridViewColumn Header="{DynamicResource header_revert}" Width="80">
                    <GridViewColumn.CellTemplate>
                        <DataTemplate>
                            <Button Height="24" Width="24" Style="{StaticResource MaterialDesignFlatButton}"
                                    Visibility="{Binding HasChanges, Converter={StaticResource BooleanToVisibility}}"
                                        ToolTip="{DynamicResource tip_revert}" Padding="0" Click="ChangeList_Revert_Click" Tag="{Binding Name}">
                                <material:PackIcon
                                            Kind="UndoVariant"
                                            Height="16"
                                            Width="16" />
                            </Button>
                        </DataTemplate>
                    </GridViewColumn.CellTemplate>
                </GridViewColumn>
            </GridView>
        </ListView.View>
    </ListView>
    <ListView x:Name="lv_elementsRight" SelectionMode="Single" Grid.Row="1" Grid.Column="2" ItemsSource="{Binding SkinRight.Elements}" SelectionChanged="RightSkin_SelectionChanged">
        <ListView.ContextMenu>
            <ContextMenu>
                <MenuItem Click="MenuItem_PlaybackToggleRight_Click" Header="{DynamicResource tip_play}" IsEnabled="{Binding PlayEnabledRight}" Visibility="{Binding PlayStatusRight, Converter={StaticResource IntToVisibility}, ConverterParameter=0}"/>
                <MenuItem Click="MenuItem_PlaybackToggleRight_Click" Header="{DynamicResource tip_pause}" Visibility="{Binding PlayStatusRight, Converter={StaticResource IntToVisibility}, ConverterParameter=1}"/>
                <MenuItem Click="MenuItem_PlaybackStopRight_Click" Header="{DynamicResource tip_stop}" Visibility="{Binding PlayStatusRight, Converter={StaticResource IntToVisibility}, ConverterParameter=1}"/>
                <Separator/>
                <MenuItem Click="MoveElement_Click" Header="Copy over left element">
                    <MenuItem.Style>
                        <Style TargetType="{x:Type MenuItem}" BasedOn="{StaticResource {x:Type MenuItem}}">
                            <Setter Property="IsEnabled" Value="False"/>
                            <Style.Triggers>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding SelectedIndex, ConverterParameter=0, Converter={StaticResource IntToBoolean}, ElementName=lv_elementsLeft}" Value="True"/>
                                        <Condition Binding="{Binding SelectedIndex, ConverterParameter=0, Converter={StaticResource IntToBoolean}, ElementName=lv_elementsRight}" Value="True"/>
                                        <Condition Binding="{Binding FileTypeMatch}" Value="True"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="IsEnabled" Value="True"/>
                                </MultiDataTrigger>
                            </Style.Triggers>
                        </Style>
                    </MenuItem.Style>
                </MenuItem>
                <MenuItem Click="MenuItem_LoadRightSkin_Click" Header="{DynamicResource mixer_selectRightSkin}"/>
            </ContextMenu>
        </ListView.ContextMenu>
        <ListView.View>
            <GridView>
                <GridViewColumn Width="200" Header="{DynamicResource name}">
                    <GridViewColumn.CellTemplate>
                        <DataTemplate>
                            <TextBlock Text="{Binding Name, UpdateSourceTrigger=PropertyChanged}" FontStyle="{Binding FontStyle, UpdateSourceTrigger=PropertyChanged}" FontWeight="{Binding FontWeight, UpdateSourceTrigger=PropertyChanged}"/>
                        </DataTemplate>
                    </GridViewColumn.CellTemplate>
                </GridViewColumn>
                <GridViewColumn Header="" Width="32">
                    <GridViewColumn.CellTemplate>
                        <DataTemplate>
                            <material:PackIcon
                                Kind="{Binding FileType, Converter={StaticResource FileTypeToIcon}, Mode=OneWay, FallbackValue=File}"
                                Height="24"
                                Width="24" />
                        </DataTemplate>
                    </GridViewColumn.CellTemplate>
                </GridViewColumn>
                <GridViewColumn Header="HD" Width="32">
                    <GridViewColumn.CellTemplate>
                        <DataTemplate>
                            <material:PackIcon Visibility="{Binding IsHighDefinition, Converter={StaticResource BooleanToVisibility}, UpdateSourceTrigger=PropertyChanged}"
                                Kind="HighDefinition"
                                Height="24"
                                Width="24" />
                        </DataTemplate>
                    </GridViewColumn.CellTemplate>
                </GridViewColumn>
            </GridView>
        </ListView.View>
    </ListView>
    <material:ColorZone Mode="Dark" Grid.Row="2" VerticalAlignment="Stretch">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="158*"/>
                <ColumnDefinition Width="207*"/>
            </Grid.ColumnDefinitions>
            <Image Source="{Binding ImageLeft}" Grid.ColumnSpan="2" Margin="0,0,0,44"/>
            <material:PackIcon Kind="{Binding IconLeft}" Visibility="{Binding ShowIconLeft, FallbackValue=Hidden, TargetNullValue=Hidden}" HorizontalAlignment="Center" VerticalAlignment="Center" Width="128" Height="128" Grid.ColumnSpan="2" Margin="0,0,0,44"/>

            <material:Transitioner x:Name="transitionerLeft" SnapsToDevicePixels="True" AutoApplyTransitionOrigins="True" ClipToBounds="False"
                                   VerticalAlignment="Bottom" SelectedIndex="{Binding PlayStatusLeft}" Grid.ColumnSpan="2">
                <material:TransitionerSlide>
                    <material:TransitionerSlide.ForwardWipe>
                        <material:CircleWipe/>
                    </material:TransitionerSlide.ForwardWipe>
                    <material:ColorZone Height="44" Mode="Dark" VerticalAlignment="Bottom">
                        <Button Padding="0" HorizontalAlignment="Left" IsEnabled="{Binding PlayEnabledLeft}"
                            ToolTip="{DynamicResource tip_play}" Click="PlaybackToggleLeft_Click"
                                    Command="{x:Static material:Transitioner.MoveNextCommand}" Margin="16,0,0,0" Height="44" Width="44" Background="{x:Null}" BorderBrush="{x:Null}">
                            <material:PackIcon
                            Kind="Play"
                            Height="32"
                            Width="32" />
                        </Button>
                    </material:ColorZone>
                </material:TransitionerSlide>
                <material:TransitionerSlide>
                    <material:TransitionerSlide.BackwardWipe>
                        <material:CircleWipe/>
                    </material:TransitionerSlide.BackwardWipe>
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="44"/>
                            <RowDefinition Height="44"/>
                        </Grid.RowDefinitions>
                        <material:ColorZone Mode="PrimaryDark" Grid.Row="1">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="16"/>
                                    <ColumnDefinition Width="48"/>
                                    <ColumnDefinition Width="8"/>
                                    <ColumnDefinition Width="48"/>
                                    <ColumnDefinition Width="8"/>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="88"/>
                                </Grid.ColumnDefinitions>
                                <Button Padding="0" Grid.Column="1" x:Name="btn_pauseLeft"
                            HorizontalAlignment="Left"
                            ToolTip="{DynamicResource tip_pause}" Click="PlaybackToggleLeft_Click"
                                    Height="44" Width="44" Background="{x:Null}" BorderBrush="{x:Null}">
                                    <Button.Style>
                                        <Style TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
                                            <Setter Property="Content">
                                                <Setter.Value>
                                                    <material:PackIcon Kind="Pause" Height="32" Width="32"/>
                                                </Setter.Value>
                                            </Setter>
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding AudioEnded}" Value="True">
                                                    <Setter Property="Content">
                                                        <Setter.Value>
                                                            <material:PackIcon Kind="Replay" Height="24" Width="24"/>
                                                        </Setter.Value>
                                                    </Setter>
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding AudioPlayingLeft}" Value="False">
                                                    <Setter Property="Content">
                                                        <Setter.Value>
                                                            <material:PackIcon Kind="Play" Height="32" Width="32"/>
                                                        </Setter.Value>
                                                    </Setter>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </Button.Style>
                                </Button>
                                <Button Padding="0" Grid.Column="3"
                            HorizontalAlignment="Left"
                            ToolTip="{DynamicResource tip_stop}" Click="PlaybackStopLeft_Click"
                                    Command="{x:Static material:Transitioner.MovePreviousCommand}" Height="44" Width="44" Background="{x:Null}" BorderBrush="{x:Null}">
                                    <material:PackIcon
                            Kind="Stop"
                            Height="32"
                            Width="32" />
                                </Button>
                            </Grid>
                        </material:ColorZone>
                        <Slider x:Name="slider_audioLeft" VerticalAlignment="Center" Foreground="{DynamicResource PrimaryHueMidBrush}"
                                    Minimum="0" Maximum="{Binding AudioLength}" IsMoveToPointEnabled="True"
                                    Value="{Binding AudioPosition}" Margin="0,0,88,0" Grid.RowSpan="2" ValueChanged="Slider_Audio_ValueChanged"/>
                        <TextBlock VerticalAlignment="Bottom" Margin="16,4" Style="{StaticResource MaterialDesignBody1TextBlock}" Foreground="{DynamicResource PrimaryHueDarkForegroundBrush}">
                        <Run Text="{DynamicResource edit_currentlyPlaying}"/> <Run Text="{Binding SelectedElement.Name}"/>
                        </TextBlock>
                    </Grid>
                </material:TransitionerSlide>
            </material:Transitioner>
        </Grid>
    </material:ColorZone>
    <material:ColorZone Mode="Dark" Grid.Column="2" Grid.Row="2" VerticalAlignment="Stretch">
        <Grid>
            <Image Source="{Binding ImageRight}" Margin="0,0,0,44"/>
            <material:PackIcon Kind="{Binding IconRight}" Visibility="{Binding ShowIconRight, FallbackValue=Hidden, TargetNullValue=Hidden}" HorizontalAlignment="Center" VerticalAlignment="Center" Width="128" Height="128" Margin="0,0,0,44"/>

            <material:Transitioner x:Name="transitionerRight" SnapsToDevicePixels="True" AutoApplyTransitionOrigins="True" ClipToBounds="False"
                                   VerticalAlignment="Bottom" SelectedIndex="{Binding PlayStatusRight}" Grid.ColumnSpan="2">
                <material:TransitionerSlide>
                    <material:TransitionerSlide.ForwardWipe>
                        <material:CircleWipe/>
                    </material:TransitionerSlide.ForwardWipe>
                    <material:ColorZone Height="44" Mode="Dark" VerticalAlignment="Bottom">
                        <Button Padding="0" HorizontalAlignment="Left" IsEnabled="{Binding PlayEnabledRight}"
                            ToolTip="{DynamicResource tip_play}" Click="PlaybackToggleRight_Click"
                                    Command="{x:Static material:Transitioner.MoveNextCommand}" Margin="16,0,0,0" Height="44" Width="44" Background="{x:Null}" BorderBrush="{x:Null}">
                            <material:PackIcon
                            Kind="Play"
                            Height="32"
                            Width="32" />
                        </Button>
                    </material:ColorZone>
                </material:TransitionerSlide>
                <material:TransitionerSlide>
                    <material:TransitionerSlide.BackwardWipe>
                        <material:CircleWipe/>
                    </material:TransitionerSlide.BackwardWipe>
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="44"/>
                            <RowDefinition Height="44"/>
                        </Grid.RowDefinitions>
                        <material:ColorZone Mode="PrimaryDark" Grid.Row="1">
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="16"/>
                                    <ColumnDefinition Width="48"/>
                                    <ColumnDefinition Width="8"/>
                                    <ColumnDefinition Width="48"/>
                                    <ColumnDefinition Width="8"/>
                                    <ColumnDefinition Width="*"/>
                                    <ColumnDefinition Width="88"/>
                                </Grid.ColumnDefinitions>
                                <Button Padding="0" Grid.Column="1" x:Name="btn_pauseRight"
                            HorizontalAlignment="Left"
                            ToolTip="{DynamicResource tip_pause}" Click="PlaybackToggleRight_Click"
                                    Height="44" Width="44" Background="{x:Null}" BorderBrush="{x:Null}">
                                    <Button.Style>
                                        <Style TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
                                            <Setter Property="Content">
                                                <Setter.Value>
                                                    <material:PackIcon Kind="Pause" Height="32" Width="32"/>
                                                </Setter.Value>
                                            </Setter>
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding AudioEnded}" Value="True">
                                                    <Setter Property="Content">
                                                        <Setter.Value>
                                                            <material:PackIcon Kind="Replay" Height="24" Width="24"/>
                                                        </Setter.Value>
                                                    </Setter>
                                                </DataTrigger>
                                                <DataTrigger Binding="{Binding AudioPlayingRight}" Value="False">
                                                    <Setter Property="Content">
                                                        <Setter.Value>
                                                            <material:PackIcon Kind="Play" Height="32" Width="32"/>
                                                        </Setter.Value>
                                                    </Setter>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </Button.Style>
                                </Button>
                                <Button Padding="0" Grid.Column="3"
                            HorizontalAlignment="Left"
                            ToolTip="{DynamicResource tip_stop}" Click="PlaybackStopRight_Click"
                                    Command="{x:Static material:Transitioner.MovePreviousCommand}" Height="44" Width="44" Background="{x:Null}" BorderBrush="{x:Null}">
                                    <material:PackIcon
                            Kind="Stop"
                            Height="32"
                            Width="32" />
                                </Button>
                            </Grid>
                        </material:ColorZone>
                        <Slider x:Name="slider_audioRight" VerticalAlignment="Center" Foreground="{DynamicResource PrimaryHueMidBrush}"
                                    Minimum="0" Maximum="{Binding AudioLength}" IsMoveToPointEnabled="True"
                                    Value="{Binding AudioPosition}" Margin="0,0,88,0" Grid.RowSpan="2" ValueChanged="Slider_Audio_ValueChanged"/>
                        <TextBlock VerticalAlignment="Bottom" Margin="16,4" Style="{StaticResource MaterialDesignBody1TextBlock}" Foreground="{DynamicResource PrimaryHueDarkForegroundBrush}">
                        <Run Text="{DynamicResource edit_currentlyPlaying}"/> <Run Text="{Binding SelectedElement.Name}"/>
                        </TextBlock>
                    </Grid>
                </material:TransitionerSlide>
            </material:Transitioner>
        </Grid>
    </material:ColorZone>
    <StackPanel Grid.Column="1" Grid.Row="2" HorizontalAlignment="Center">
        <Button Padding="0" Margin="0,8" Click="MoveElement_Click" ToolTip="{DynamicResource tip_mixer_transfer}"
                    Height="48" Width="48" Foreground="{DynamicResource MaterialDesignToolTipBackground}" x:Name="btn_transfer">
            <Button.Style>
                <Style TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
                    <Setter Property="Background" Value="{x:Null}"/>
                    <Setter Property="BorderBrush" Value="{x:Null}"/>
                    <Setter Property="IsEnabled" Value="False"/>
                    <Style.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding SelectedIndex, ConverterParameter=0, Converter={StaticResource IntToBoolean}, ElementName=lv_elementsLeft}" Value="True"/>
                                <Condition Binding="{Binding SelectedIndex, ConverterParameter=0, Converter={StaticResource IntToBoolean}, ElementName=lv_elementsRight}" Value="True"/>
                                <Condition Binding="{Binding FileTypeMatch}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="IsEnabled" Value="True"/>
                        </MultiDataTrigger>
                    </Style.Triggers>
                </Style>
            </Button.Style>
            <material:PackIcon Kind="ArrowLeft" Width="36" Height="36"/>
        </Button>
        <Button Padding="0" Margin="0,8" Click="RevertSelected_Click" ToolTip="{DynamicResource tip_revertSelected}"
                    Height="48" Width="48" Foreground="{DynamicResource MaterialDesignToolTipBackground}" x:Name="btn_revert">
            <Button.Style>
                <Style TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
                    <Setter Property="Background" Value="{x:Null}"/>
                    <Setter Property="BorderBrush" Value="{x:Null}"/>
                    <Setter Property="IsEnabled" Value="False"/>
                    <Style.Triggers>
                        <MultiDataTrigger>
                            <MultiDataTrigger.Conditions>
                                <Condition Binding="{Binding SelectedIndex, ConverterParameter=0, Converter={StaticResource IntToBoolean}, ElementName=lv_elementsLeft}" Value="True"/>
                                <Condition Binding="{Binding SelectedElementLeft.HasChanges}" Value="True"/>
                            </MultiDataTrigger.Conditions>
                            <Setter Property="IsEnabled" Value="True"/>
                        </MultiDataTrigger>
                    </Style.Triggers>
                </Style>
            </Button.Style>
            <material:PackIcon Kind="UndoVariant" Width="36" Height="36"/>
        </Button>
    </StackPanel>
    <material:Card Grid.ColumnSpan="3" VerticalAlignment="Stretch">
        <Grid>
            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="350*"/>
                <ColumnDefinition Width="70"/>
                <ColumnDefinition Width="350*"/>
            </Grid.ColumnDefinitions>
            <TextBlock Text="{Binding SkinLeft.Name}" HorizontalAlignment="Center" VerticalAlignment="Center"/>
            <TextBlock Grid.Column="2" Text="{Binding SkinRight.Name}" HorizontalAlignment="Center" VerticalAlignment="Center"/>
        </Grid>
    </material:Card>
    <material:Card Grid.Row="3" Grid.ColumnSpan="3" VerticalAlignment="Stretch">
        <Grid Margin="8,0">
            <StackPanel Orientation="Horizontal" Grid.Column="5" VerticalAlignment="Center">
                <ToggleButton x:Name="cb_mute" Click="Mute_Click"
                                Style="{StaticResource MaterialDesignActionToggleButton}"
                                 ToolTip="{DynamicResource tip_mute}">
                    <ToggleButton.Content>
                        <material:PackIcon
                                        Kind="{Binding Value, ElementName=slider_volume, Converter={StaticResource VolumeToIcon}, FallbackValue=VolumeMedium}" />
                    </ToggleButton.Content>
                    <material:ToggleButtonAssist.OnContent>
                        <material:PackIcon
                                        Kind="VolumeMute" />
                    </material:ToggleButtonAssist.OnContent>
                </ToggleButton>
                <Slider x:Name="slider_volume" VerticalAlignment="Center" Margin="8,0"
                                    Minimum="0" Maximum="1" ToolTip="Volume slider" ValueChanged="Volume_ValueChanged"
                                    Value=".8" Width="140" SmallChange="0.01" LargeChange="0.1" TickFrequency="0.01"/>
            </StackPanel>
        </Grid>
    </material:Card>
    <Button Grid.Row="2" Grid.RowSpan="2" Grid.Column="2" Margin="0,16,16,16" VerticalAlignment="Bottom" x:Name="btn_loadRight"
                       HorizontalAlignment="Right" Command="{x:Static material:DialogHost.OpenDialogCommand}" ToolTip="{DynamicResource tip_mixer_loadRightSkin}"
            Style="{StaticResource MaterialDesignFloatingActionAccentButton}" >
        <Button.CommandParameter>
            <local:SkinMixerSelect Margin="8" Tag="mixer" Loaded="SkinMixerSelect_Loaded" DialogClosed="SkinMixerSelect_DialogClosed"/>
        </Button.CommandParameter>
        <material:PackIcon Kind="CursorPointer" Height="24" Width="24"/>
    </Button>
    <material:Snackbar MessageQueue="{material:MessageQueue}"
                                                 x:Name="snackbar" Grid.ColumnSpan="3" Grid.Row="3"/>
</Grid>
