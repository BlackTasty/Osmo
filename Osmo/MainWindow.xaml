<metro:MetroWindow
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:metro="http://metro.mahapps.com/winfx/xaml/controls"
        xmlns:material="http://materialdesigninxaml.net/winfx/xaml/themes" 
        xmlns:converter="clr-namespace:Osmo.Converters"
        xmlns:vm="clr-namespace:Osmo.ViewModel"
        xmlns:ui="clr-namespace:Osmo.UI"
        x:Class="Osmo.MainWindow"
        mc:Ignorable="d"
        Title="Osmo" Height="600" Width="800" MinWidth="683" MinHeight="554"
        TextElement.Foreground="{DynamicResource MaterialDesignBody}"
        Background="{DynamicResource MaterialDesignPaper}"
        TextElement.FontWeight="Medium"
        TextElement.FontSize="14" AllowDrop="True"
        FontFamily="pack://application:,,,/MaterialDesignThemes.Wpf;component/Resources/Roboto/#Roboto"
    Closing="MetroWindow_Closing" DragEnter="MetroWindow_DragEnter"
    PreviewKeyUp="MetroWindow_PreviewKeyUp">
    <Window.DataContext>
        <vm:OsmoViewModel/>
    </Window.DataContext>
    <Window.Resources>
        <converter:IntToVisibilityConverter x:Key="IntToVisibility"/>
        <converter:DebugConverter x:Key="Debug"/>
        <converter:SidebarConverter x:Key="SidebarHelper"/>
        <converter:InverseBoolToVisibilityConverter x:Key="InverseBoolToVisibility"/>

        <DataTemplate x:Key="EntryDataTemplate">
            <StackPanel Orientation="Horizontal">
                <material:PackIcon Kind="{Binding Icon}" Height="32" Width="32" Margin="16,0,0,0"/>
                <TextBlock Text="{Binding Name}"  Margin="16 0 16 0" Style="{StaticResource MaterialDesignSubheadingTextBlock}" VerticalAlignment="Center" 
                                               Foreground="{Binding Foreground, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListBoxItem}}}"/>
            </StackPanel>
        </DataTemplate>
        <DataTemplate x:Key="SubEntryDataTemplate">
            <StackPanel Orientation="Horizontal" Height="32">
                <TextBlock Text="{Binding Name}" Margin="64 0 16 0" Style="{StaticResource MaterialDesignSubheadingTextBlock}" VerticalAlignment="Center" 
                                               Foreground="{Binding Foreground, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListBoxItem}}}" FontWeight="Bold"/>
            </StackPanel>
        </DataTemplate>

        <converter:SidebarDataTemplateSelector x:Key="sidebarTemplateSelector"
                                               EntryDataTemplate="{StaticResource EntryDataTemplate}"
                                               SubEntryDataTemplate="{StaticResource SubEntryDataTemplate}"/>
        <Storyboard x:Key="HideUpdater">
            <ThicknessAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.Margin)" Storyboard.TargetName="updaterContainer">
                <EasingThicknessKeyFrame KeyTime="0:0:0.5" Value="8,8,-308,8">
                    <EasingThicknessKeyFrame.EasingFunction>
                        <CubicEase EasingMode="EaseIn"/>
                    </EasingThicknessKeyFrame.EasingFunction>
                </EasingThicknessKeyFrame>
            </ThicknessAnimationUsingKeyFrames>
        </Storyboard>
        <Storyboard x:Key="ShowUpdater">
            <ThicknessAnimationUsingKeyFrames Storyboard.TargetProperty="(FrameworkElement.Margin)" Storyboard.TargetName="updaterContainer">
                <EasingThicknessKeyFrame KeyTime="0:0:0.5" Value="8">
                    <EasingThicknessKeyFrame.EasingFunction>
                        <CubicEase EasingMode="EaseOut"/>
                    </EasingThicknessKeyFrame.EasingFunction>
                </EasingThicknessKeyFrame>
            </ThicknessAnimationUsingKeyFrames>
        </Storyboard>
    </Window.Resources>
    <metro:MetroWindow.WindowButtonCommands>
        <metro:WindowButtonCommands Style="{DynamicResource MahApps.Metro.Styles.WindowButtonCommands.Win10}"
                                    Minimize="{DynamicResource minimize}"
                                    Maximize="{DynamicResource maximize}"
                                    Restore="{DynamicResource restore}"
                                    Close="{DynamicResource close}"/>
    </metro:MetroWindow.WindowButtonCommands>

    <!--SnackbarMessageQueue="{Binding ElementName=MainSnackbar, Path=MessageQueue}"-->
    <material:DialogHost Identifier="RootDialog" Loaded="DialogHost_Loaded" CloseOnClickAway="True">
        <material:DrawerHost IsLeftDrawerOpen="{Binding ElementName=MenuToggleButton, Path=IsChecked}">
            <material:DrawerHost.LeftDrawerContent>
                <DockPanel MinWidth="212">
                    <ToggleButton Style="{StaticResource MaterialDesignHamburgerToggleButton}" 
                                    DockPanel.Dock="Top" 
                                    HorizontalAlignment="Right" Margin="16"
                                    IsChecked="{Binding ElementName=MenuToggleButton, Path=IsChecked, Mode=TwoWay}" />
                    <ListBox x:Name="sidebarMenu" Margin="0 16 0 16" SelectedIndex="{Binding SelectedSidebarIndex}"                         
                             ItemsSource="{Binding Items}" SelectionChanged="sidebarMenu_SelectionChanged" Loaded="sidebarMenu_Loaded"
                             ItemTemplateSelector="{StaticResource sidebarTemplateSelector}">
                        <!--<ListBox.ItemTemplate>
                            <DataTemplate>
                                <StackPanel Orientation="Horizontal">
                                    <material:PackIcon Kind="{Binding Icon}" Width="32" Height="32" Margin="16,0,0,0"/>
                                    <TextBlock Text="{Binding Name}"  Margin="16 0 16 0" Style="{StaticResource MaterialDesignSubheadingTextBlock}" VerticalAlignment="Center" 
                                               Foreground="{Binding Foreground, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type ListBoxItem}}}"/>
                                </StackPanel>
                            </DataTemplate>
                        </ListBox.ItemTemplate>-->
                        <ListBox.ItemContainerStyle>
                            <Style TargetType="ListBoxItem" BasedOn="{StaticResource {x:Type ListBoxItem}}">
                                <Setter Property="Visibility" Value="{Binding IsVisible}"/>
                                <Style.Triggers>
                                    <DataTrigger Binding="{Binding Content.IsEnabled}" Value="False">
                                        <Setter Property="IsHitTestVisible" Value="False"/>
                                        <Setter Property="IsEnabled" Value="False"/>
                                    </DataTrigger>
                                    <Trigger Property="IsSelected" Value="True">
                                        <Setter Property="FontWeight" Value="Bold"/>
                                        <Setter Property="IsEnabled" Value="True"/>
                                        <Setter Property="Foreground" Value="{DynamicResource PrimaryHueMidBrush}"/>
                                    </Trigger>
                                </Style.Triggers>
                            </Style>
                        </ListBox.ItemContainerStyle>
                    </ListBox>
                </DockPanel>
            </material:DrawerHost.LeftDrawerContent>
            <DockPanel>
                <material:ColorZone Padding="16, 13.5" material:ShadowAssist.ShadowDepth="Depth2"
                            Mode="PrimaryMid" DockPanel.Dock="Top">
                    <DockPanel>
                        <ToggleButton x:Name="MenuToggleButton" Style="{StaticResource MaterialDesignHamburgerToggleButton}"/>
                        <material:PopupBox DockPanel.Dock="Right" PlacementMode="BottomAndAlignRightEdges" StaysOpen="False" Margin="8,0,0,0">
                            <StackPanel>
                                <Button Content="{DynamicResource main_revertAll}" Click="RevertAll_Click" 
                                        Visibility="{Binding SelectedSidebarIndex, Converter={StaticResource IntToVisibility}, ConverterParameter=2;3}"/>
                                <Button Content="{DynamicResource main_createForumEntry}" Click="CreateForumEntry_Click"
                                         Command="{x:Static material:DialogHost.OpenDialogCommand}"
                                        Visibility="{Binding SelectedSidebarIndex, Converter={StaticResource IntToVisibility}, ConverterParameter=2;3}">
                                    <Button.CommandParameter>
                                        <ui:TemplatePreview x:Name="templatePreview" Margin="8"/>
                                    </Button.CommandParameter>
                                </Button>
                                <Button Content="{DynamicResource main_openInExplorer}" Click="OpenInFileExplorer_OnClick"
                                        Visibility="{Binding SelectedSidebarIndex, Converter={StaticResource IntToVisibility}, ConverterParameter=2;3}"/>
                                <Button Content="{DynamicResource main_openInMixer}" Click="OpenInSkinMixer_Click" Visibility="{Binding SelectedSidebarIndex, Converter={StaticResource IntToVisibility}, ConverterParameter=2}"/>
                                <Button Content="{DynamicResource main_openInEditor}" Click="OpenInSkinEditor_Click" Visibility="{Binding SelectedSidebarIndex, Converter={StaticResource IntToVisibility}, ConverterParameter=3}"/>
                                <Button Content="{DynamicResource sidebar_resizeTool}" Click="OpenInResizeTool_Click"  Visibility="{Binding SelectedSidebarIndex, Converter={StaticResource IntToVisibility}, ConverterParameter=2;3}"/>
                                <Separator Visibility="{Binding SelectedSidebarIndex, Converter={StaticResource IntToVisibility}, ConverterParameter=2;3}"/>
                                <Button Content="{DynamicResource updater_show}" Click="Btn_update_Click"/>
                                <Button Content="{DynamicResource main_exit}" Click="Close_Click"/>
                            </StackPanel>
                        </material:PopupBox>
                        <Button DockPanel.Dock="Right"
                            ToolTip="{Binding ElementName=updater, Path=ToolTip}" x:Name="btn_update" Style="{StaticResource AppBarButton}"
                                Click="Btn_update_Click" Visibility="{Binding ElementName=updater, Path=IsIdle, Converter={StaticResource InverseBoolToVisibility}}">
                            <material:PackIcon
                            Kind="{Binding ElementName=updater, Path=CurrentIcon, FallbackValue=CloudDownload}"
                            Height="28"
                            Width="28" />
                        </Button>
                        <Button DockPanel.Dock="Right" Visibility="{Binding SelectedSidebarIndex, Converter={StaticResource IntToVisibility}, ConverterParameter=2;3;8}"
                            ToolTip="{DynamicResource main_saveAll}" Click="SaveSkinOrTemplate_Click" Style="{StaticResource AppBarButton}">
                            <material:PackIcon
                            Kind="ContentSave"
                            Height="28"
                            Width="28" />
                        </Button>
                        <Button DockPanel.Dock="Right" Visibility="{Binding SelectedSidebarIndex, Converter={StaticResource IntToVisibility}, ConverterParameter=2;3}"
                            ToolTip="{DynamicResource main_skinInfo}" Click="ShowSkinInfo_Click" Style="{StaticResource AppBarButton}">
                            <material:PackIcon
                            Kind="InformationOutline"
                            Height="28"
                            Width="28" />
                        </Button>
                        <Button DockPanel.Dock="Right" Visibility="{Binding SelectedSidebarIndex, Converter={StaticResource IntToVisibility}, ConverterParameter=2;3}"
                            ToolTip="{DynamicResource main_exportSkin}" Style="{StaticResource AppBarButton}"
                            Command="{x:Static material:DialogHost.OpenDialogCommand}" x:Name="btn_export">
                            <Button.CommandParameter>
                                <ui:FilePicker IsFolderSelect="True" Title="{DynamicResource export_selectDirectory}" DialogClosed="FolderPicker_DialogClosed"/>
                            </Button.CommandParameter>
                            <material:PackIcon
                            Kind="PackageDown"
                            Height="28"
                            Width="28" />
                        </Button>
                        <Button DockPanel.Dock="Right" Visibility="{Binding SelectedSidebarIndex, Converter={StaticResource IntToVisibility}, ConverterParameter=0}"
                            ToolTip="{DynamicResource main_importSkin}" x:Name="btn_import" Style="{StaticResource AppBarButton}"
                                 Command="{x:Static material:DialogHost.OpenDialogCommand}">
                            <material:PackIcon
                            Kind="PackageUp"
                            Height="28"
                            Width="28" />
                            <Button.CommandParameter>
                                <ui:DragDropArea/>
                            </Button.CommandParameter>
                        </Button>
                        <!--<Button DockPanel.Dock="Right" Visibility="{Binding SelectedSidebarIndex, Converter={StaticResource IntToVisibility}, ConverterParameter=0}"
                                ToolTip="{DynamicResource main_syncSkinFolders}" x:Name="btn_syncSkins" Style="{StaticResource AppBarButton}">
                            <material:PackIcon
                            Kind="Sync"
                            Height="28"
                            Width="28" />
                        </Button>-->
                        <TextBlock HorizontalAlignment="Center" VerticalAlignment="Center" FontSize="22" Text="{Binding Content.Tag, ElementName=content}"/>
                    </DockPanel>
                </material:ColorZone>

                <ui:DebugConsole x:Name="console" DockPanel.Dock="Bottom" IsVisibleChanged="console_IsVisibleChanged" Visibility="Collapsed" Loaded="console_Loaded" MaxHeight="200"/>
                <Grid>
                    <ContentControl x:Name="content" Content="{Binding SelectedItem.Content, ElementName=sidebarMenu}"/>
                    <material:Card x:Name="updaterContainer" Visibility="Visible" Margin="8,8,-308,8" Width="300" Height="160" HorizontalAlignment="Right" VerticalAlignment="Top">
                        <ui:UpdateStatus x:Name="updater"
                                     Background="{DynamicResource MaterialDesignBackground}"/>
                    </material:Card>
                </Grid>
            </DockPanel>
        </material:DrawerHost>
    </material:DialogHost>
</metro:MetroWindow>
